# LEARN JQUERY: EFFECTS
-----------------------

* Introduction
--------------
jQuery Effects are a group of methods in the jQuery library that are responsible for adding dynamic behavior to websites. You may have seen many of these effects on modern websites 
without even realizing it. For example, you are seeing jQuery Effects in action when drop-down menus slide into place or a warning message appears after entering an incorrect password.

While adding dynamic behavior is possible using only JavaScript, the code to do so is somewhat long and confusing. The beauty of jQuery is how one or two lines of jQuery can replace long 
JavaScript code blocks.

In this course, youâ€™ll learn how to make elements appear and disappear, fade in and out, and slide around the page. Letâ€™s get started!

* Instructions
--------------
Click on some of the buttons on the website to the right. Test out the Menu and Login buttons, the arrows beneath each pair of shoes, and the shoe size buttons. Each button applies a 
different jQuery Effect!

main.js
-------
$(document).ready(() => {
  $('.menu-button').on('click',() => {
    $('#nav-dropdown').slideToggle('slow');
  });
	
  $(".login-button").on("click", () => {
    $(".login-form").slideToggle();
  });
  
  $(".arrow-one").on("click", () => {
    $(".shoe-details-one").toggle();
  });
  
  $(".sizes-one").on("click", () => {
    $(".text-one").fadeIn(1000);
  });
  
  $(".arrow-two").on("click", () => {
    $(".shoe-details-two").toggle();
  });
  
  $(".sizes-two").on("click", () => {
    $(".text-two").fadeIn();
  });
  
  $(".arrow-three").on("click", () => {
    $(".shoe-details-three").toggle();
  });
  
  $(".sizes-three").on("click", () => {
    $(".text-three").fadeIn(1000);
  });
  
});

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* .hide()
---------
The first tool you will add to your jQuery effects tool belt is the .hide() method. When you hide an element, your browser will render the HTML as if the hidden element does not exist. It 
will disappear from the page and the space that it was taking up will disappear as well. Take a look at the code below to learn how to use the .hide() method:

$('.hide-arrow').on('click', () => {
  $('.shoe-information').hide();
});

In the example above, the event handler gets triggered whenever an element with a class of hide-arrow is clicked. That element could be a button, some text, an image, or any other HTML 
element. When the event is triggered, we target all elements of the class shoe-information and call .hide() on them. Check out the gif below to see an example.


In this gif, the shoe-information element hides when the hide-arrow button is clicked. Notice that the HTML elements below the shoe-information element move up to fill the space left by 
the hidden element.

* Instructions
--------------
Checkpoint 1 Passed
1.
In this lesson, you will create a table that shows off nine jQuery effects.

Right now, there is one button in our table. Inside the .ready() callback function, write an event handler that is triggered when a button with the class hide-button is clicked. For now, 
leave the callback function empty.


Hint
Target .hide-button and call the .on() method on it. The first parameter should be 'click'. The second parameter should be an empty callback function.

Checkpoint 2 Passed
2.
In the callback function, target the image that has a class first-image


Hint
Use . to target an element by class.

Checkpoint 3 Passed
3.
Call the .hide() method on the targeted element. Test your button!

main.js
-------
$(document).ready(() => {
  $('.hide-button').on('click', () => {
    $('.first-image').hide();
  })
});

------------------------------------------------------------------------------------------------------------------------------------------------------------------






























































