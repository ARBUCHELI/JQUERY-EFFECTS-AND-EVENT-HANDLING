# MOUSE EVENTS
--------------

* Introduction to Mouse Events
------------------------------
The jQuery library provides a collection of methods that serve one of two purposes.

	. To listen for an event — an event (e.g. clicking a button) is something the user does to trigger an action.

	. To add a visual effect — a visual effect (e.g. a drop-down menu appearing when a user clicks a button) is something that changes the appearance of the web page. Events are often 
	responsible for triggering a visual effect.

In this lesson, you will learn how to link a user event to a visual effect using event handlers.

There are two parts to an event handler: an event listener and a callback function.

	. An event listener is a method that listens for a specified event to occur, like a click event.

	. A callback function is a function that executes when something triggers the event listener.

Both the event listener and callback function make up an event handler.

In code, this looks like:

$('.example-class').on('click', () => {
    // Execute code here when .example-class is clicked
});

Let’s consider the example above step-by-step:

	. $('.example-class') selects all HTML elements with a class of example-class.

	. The on('click') method is the event listener. It checks if the user has clicked an .example-class HTML element.

	. The second argument to .on() is a callback function. When a 'click' occurs on an example-class element, this function executes.

* Instructions
--------------
Checkpoint 1 Passed
1.
Replace the ____ in the .on() method with click.

Run the code and click the login button.

Nice work, the login button now listens for a click event. The callback function in the event handler displays a login form when you click the button.

main.js
-------
$(document).ready(() => {
  $('.login-button').on('click', () => {
    $('.login-form').show();
  })
  
  
}); 

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* On 'mouseenter'
-----------------
Another popular jQuery event listener is mouseenter. The mouseenter event triggers a callback function when a user enters the area that a targeted element occupies.

To listen for a mouse enter event, we can use the mouseenter event listener. Take a look at this code and compare it with the click function you learned in the previous exercises:

$('.example-class').on('mouseenter',  () => {
    // Execute code here when mouse enters .example-class
});

	. As before, .on() is called on a jQuery object that selects .example-class elements.

	. The first argument for .on() is the 'mouseenter' event handler. The code above will trigger the callback function when the mouse enters an .example-class element’s area.

* Instructions
--------------
Checkpoint 1 Passed
1.
Inside of the .ready() callback function, create an event handler that targets the element with class menu-button. The event handler should listen for a mouse enter event.

Pass the method an empty callback function.


Hint
Use the .on() method with a 'mouseenter' argument to add a mouse enter event listener.

Checkpoint 2 Passed
2.
Inside of the callback function, use the .show() method to display the .nav-menu element.


Hint
Append .show() to $('.nav-menu')

main.js
-------
$(document).ready(() => {
  $('.login-button').on('click', () => {
    $('.login-form').show();
  });
  $('.menu-button').on('mouseenter', () => {
    $('.nav-menu').show();
  })
}); 

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* On 'mouseleave'
-----------------
One issue with the behavior we added to our Sole Shoes website in the last exercise is that the menu remains in the DOM after the mouse leaves the menu area.

The mouseleave event listener can detect when a user’s mouse leaves the area that an element occupies. The syntax looks like:

$('.example-class').on('mouseleave', function() {
    // Execute code here when mouse leaves .example-class
});

In the example code above, a user will trigger the callback function when their mouse leaves the .example-class area.

* Instructions
--------------
Checkpoint 1 Passed
1.
In the ready callback function, target the .nav-menu element, and add an event handler with a mouseleave event listener and empty callback function.

Checkpoint 2 Passed
2.
Inside the empty callback function, use the .hide() method to hide the .nav-menu element when a user’s mouse leaves the navigation menu.

main.js
-------
$(document).ready(() => {
  $('.login-button').on('click', () => {
    $('.login-form').show();
  });
  
  $('.menu-button').on('mouseenter', () => {
    $('.nav-menu').show()
  })
  
  $('.nav-menu').on('mouseleave', () => {
    $('.nav-menu').hide();
  })
}); 

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Chaining Events
-----------------
jQuery also allows us to chain multiple methods. Instead of re-declaring the HTML element you’re selecting, you can append one event to another. Let’s see how we can use chaining to add 
hover functionality to .example-class elements.

$('.example-class').on('mouseenter', () => {
  $('.example-class-one').show();
}).on('mouseleave', () => {
  $('.example-class-one').hide();
});

In the example above, we chain a mouse enter event to a mouse leave event. Both of the event handlers target .example-class elements.

When a user’s mouse enters an .example-class element’s area we show .example-class-one elements. When a user’s mouse leaves an .example-class element’s area, we hide .example-class-one 
elements.

* Instructions
--------------
Checkpoint 1 Passed
1.
Target the .product-photo element and add an event handler that listens for a mouseenter event. For now, leave the callback function empty.

Checkpoint 2 Passed
2.
We want to make the product photos zoom in when someone hovers over them. To do this, you’ll need to add a CSS class to the product photo elements. You can add a class with the following 
code:

$('.example-class').addClass('photo-active');

Adjust the code above to select the '.product-photo' elements, and add the class 'photo-active' (without a period). While you may not know .addClass() yet, the syntax should look like 
other jQuery methods you’ve seen.

When you mouse over a product photo, the photo gets larger.

Checkpoint 3 Passed
3.
Chain an event handler to the mouseenter event handler, but this time with a mouseleave event listener.

Inside the mouseleave event’s callback function, we want to remove the photo-active class. To do this, you can use code like this:

$('.example-class').removeClass('photo-active');

Use the syntax above to remove the class photo-active from the '.product-photo' elements.

main.js
-------
$(document).ready(() => {
  $('.login-button').on('click', () => {
    $('.login-form').show();
  });
  
  $('.menu-button').on('mouseenter', () => {
    $('.nav-menu').show()
  })
  
  $('.nav-menu').on('mouseleave', () => {
    $('.nav-menu').hide();
  })

  $('.product-photo').on('mouseenter', () => {
    $('.product-photo').addClass('photo-active')
  }).on('mouseleave', () => {
    $('.product-photo').removeClass('photo-active')
  })
}); 

------------------------------------------------------------------------------------------------------------------------------------------------------------------





























































































































