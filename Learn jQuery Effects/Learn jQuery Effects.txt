# LEARN JQUERY: EFFECTS
-----------------------

* Introduction
--------------
jQuery Effects are a group of methods in the jQuery library that are responsible for adding dynamic behavior to websites. You may have seen many of these effects on modern websites 
without even realizing it. For example, you are seeing jQuery Effects in action when drop-down menus slide into place or a warning message appears after entering an incorrect password.

While adding dynamic behavior is possible using only JavaScript, the code to do so is somewhat long and confusing. The beauty of jQuery is how one or two lines of jQuery can replace long 
JavaScript code blocks.

In this course, you’ll learn how to make elements appear and disappear, fade in and out, and slide around the page. Let’s get started!

* Instructions
--------------
Click on some of the buttons on the website to the right. Test out the Menu and Login buttons, the arrows beneath each pair of shoes, and the shoe size buttons. Each button applies a 
different jQuery Effect!

main.js
-------
$(document).ready(() => {
  $('.menu-button').on('click',() => {
    $('#nav-dropdown').slideToggle('slow');
  });
	
  $(".login-button").on("click", () => {
    $(".login-form").slideToggle();
  });
  
  $(".arrow-one").on("click", () => {
    $(".shoe-details-one").toggle();
  });
  
  $(".sizes-one").on("click", () => {
    $(".text-one").fadeIn(1000);
  });
  
  $(".arrow-two").on("click", () => {
    $(".shoe-details-two").toggle();
  });
  
  $(".sizes-two").on("click", () => {
    $(".text-two").fadeIn();
  });
  
  $(".arrow-three").on("click", () => {
    $(".shoe-details-three").toggle();
  });
  
  $(".sizes-three").on("click", () => {
    $(".text-three").fadeIn(1000);
  });
  
});

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* .hide()
---------
The first tool you will add to your jQuery effects tool belt is the .hide() method. When you hide an element, your browser will render the HTML as if the hidden element does not exist. It 
will disappear from the page and the space that it was taking up will disappear as well. Take a look at the code below to learn how to use the .hide() method:

$('.hide-arrow').on('click', () => {
  $('.shoe-information').hide();
});

In the example above, the event handler gets triggered whenever an element with a class of hide-arrow is clicked. That element could be a button, some text, an image, or any other HTML 
element. When the event is triggered, we target all elements of the class shoe-information and call .hide() on them. Check out the gif below to see an example.


In this gif, the shoe-information element hides when the hide-arrow button is clicked. Notice that the HTML elements below the shoe-information element move up to fill the space left by 
the hidden element.

* Instructions
--------------
Checkpoint 1 Passed
1.
In this lesson, you will create a table that shows off nine jQuery effects.

Right now, there is one button in our table. Inside the .ready() callback function, write an event handler that is triggered when a button with the class hide-button is clicked. For now, 
leave the callback function empty.


Hint
Target .hide-button and call the .on() method on it. The first parameter should be 'click'. The second parameter should be an empty callback function.

Checkpoint 2 Passed
2.
In the callback function, target the image that has a class first-image


Hint
Use . to target an element by class.

Checkpoint 3 Passed
3.
Call the .hide() method on the targeted element. Test your button!

main.js
-------
$(document).ready(() => {
  $('.hide-button').on('click', () => {
    $('.first-image').hide();
  })
});

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* .show()
---------
Now that we’ve learned how to hide elements on our page, we want to know how to make them reappear. Luckily, the .show() method does the opposite of .hide(). If an element on your page is 
hidden, .show() will make it appear.

$('.show-arrow').on('click', () => {
  $('.shoe-information-2').show();
});

The code above should look similar to the code you wrote using .hide(). The only difference is that we are calling a different method on the targeted elements. This time we are calling 
the .show() method on the shoe’s textual information.

Check out the gif below to see .show() in action!


In this gif, all elements of class shoe-information-2 appear when an element of class show-arrow is clicked.

* Instructions
--------------
Checkpoint 1 Passed
1.
We’ve added a second button to our chart and set up an event handler for it. In its callback function, target the same image as last time. The image is of the class first-image. Call the .show() method on it.

Once you’ve run the code, click the “show” button to see it in action.


Hint
Target $('.first-image') and append .show()

main.js
-------
$(document).ready(() => {
  $('.hide-button').on('click', () => {
    $('.first-image').hide();
  });
  
  $('.show-button').on('click', () => {
    $('.first-image').show();
  });
  
});

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* .toggle()
-----------
Great work! Our table now has two buttons that hide and show our image. But wouldn’t it be nice to have one button do both? It is common for web pages to have one button that will either 
hide or show elements depending on their current state. We can achieve this by using the .toggle() method.

$('.toggle-button').on('click', () => {
  $('.shoe-information-3').toggle();
});

In the above code we call the .toggle() method on elements of class shoe-information-3. If the information is visible, clicking the .toggle-button will hide it, as if the following code 
were run.

$('.toggle-button').on('click', () => {
  $('.shoe-information-3').hide();
});

At the same time, if the shoe information is hidden, it will show itself as if the following code were run:

$('.toggle-button').on('click', () => {
  $('.shoe-information-3').show();
});

Take a look at the gif below to see the .toggle() method being called.


In this gif, the .toggle() method is called twice. The first time the arrow is clicked, .toggle() shows the shoe information because it was hidden. The second time the arrow is clicked, 
.toggle() hides the shoe information because the information was being shown. There’s no need to have a different button for .hide() and .show(); .toggle() can do both!

* Instructions
--------------
Checkpoint 1 Passed
1.
We’ve now added a third button to our chart and set up an event handler for it. Inside the event handler’s callback function, target the image with the class first-image and call the 
.toggle() method on it. Test all three of your buttons!

Notice that the Toggle button will produce an effect no matter what!

main.js
-------
$(document).ready(() => {
  $('.hide-button').on('click', () => {
    $('.first-image').hide();
  });
  
  $('.show-button').on('click', () => {
    $('.first-image').show();
  });
  
  $('.toggle-button').on('click', () => {
    $('.first-image').toggle();
  });
  
});

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* fading
--------
Great work! In this exercise, you will learn about two new methods that are similar to .hide() and .show(). Take a look at the gif below:


In this gif, the .fadeIn() method is called on an HTML element. Instead of instantly showing the element, .fadeIn() and .fadeOut() make the element appear or disappear over a given period 
of time. You can think of this as an animation. The transition between being visible and invisible happens over a duration of time.

Both .fadeIn() and .fadeOut() take an optional parameter that specifies how long the animation will take. For example, in the code below, all <div> elements will fade out over a period of 
1000 milliseconds (or one second).

$('div').fadeOut(1000);

In the example above, the 1000 argument is optional; you don’t need to put a number between the parentheses. This number represents the number of milliseconds it takes for the animation 
to complete. If no argument is given, the default animation duration is 400 milliseconds.

* Instructions
--------------
Checkpoint 1 Passed
1.
We’ve added two new buttons and a new image to our table. We’ve also given you the event handlers for these new buttons. In the first new event handler’s callback function, select the 
image of class fade-image and call .fadeOut() on it.

Give .fadeOut() an argument to make the animation take 500 milliseconds.

Test the Fade Out button!


Hint
After targeting the correct element, call .fadeOut(500) on it

Checkpoint 2 Passed
2.
In the second event handler’s callback function, select the same image and call .fadeIn() on it. Let’s make the image appear slower than it disappears. Give .fadeIn() a parameter of 
4000.

Try out the Fade In button. You should notice that the image fades in much slower!


Hint
This will look similar to step 1, but you will call .fadeIn() instead of .fadeOut(). Make sure to change the parameter to 4000

main.js
-------
$(document).ready(() => {
  $('.hide-button').on('click', () => {
    $('.first-image').hide();
  });
  
  $('.show-button').on('click', () => {
    $('.first-image').show();
  });
  
  $('.toggle-button').on('click', () => {
    $('.first-image').toggle();
  });
  
  $('.fade-out-button').on('click', () => {
    $('.fade-image').fadeOut(500);
  });
  
  $('.fade-in-button').on('click', () => {
    $('.fade-image').fadeIn(4000);
  });
  
});

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* .fadeToggle() 
---------------
Great work! With fade, our website is starting to look dynamic. .fadeToggle() is the third and final method in this trio of fade methods. This method is similar to .toggle(). If you call 
.fadeToggle() on an element that is invisible, it will fade in. And if the element is already visible, then .fadeToggle() will make it fade out.

Like the other fade methods, .fadeToggle() can take an argument that sets the duration of the effect.

$('div').fadeToggle(1000);

In the example above, all div elements will fade in or out over a period of 1000 milliseconds. Hidden div elements will fade in, and visible div elements will fade out.

* Instructions
--------------
Checkpoint 1 Passed
1.
Inside the event handler connected to the button of class fade-toggle-button, target the image of class fade-image and call .fadeToggle() on it. Take a look at the jQuery documentation to 
see how to use a string as an argument. Make the image fade fast. Try all three of your fade buttons!

Notice that the fade toggle button always produces an effect regardless of the current state of the element.


Hint
When using the argument 'fast', make sure it is in quotes!

main.js
-------
$(document).ready(() => {
  $('.hide-button').on('click', () => {
    $('.first-image').hide();
  });
  
  $('.show-button').on('click', () => {
    $('.first-image').show();
  });
  
  $('.toggle-button').on('click', () => {
    $('.first-image').toggle();
  });
  
  $('.fade-out-button').on('click', () => {
    $('.fade-image').fadeOut(500);
  });
  
  $('.fade-in-button').on('click', () => {
    $('.fade-image').fadeIn(4000);
  });
  
  $('.fade-toggle-button').on('click', () => {
    $('.fade-image').fadeToggle('slow');
  });
});

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Sliding
---------
Have you ever been to a website and seen HTML elements slide into place? Many websites use this effect to show menus; you click on your profile image and a menu slides down revealing 
different settings and options that you can change. These sites are likely using jQuery sliding effects.

By using sliding effects, an element on your web page will slide up or down into place instead of appearing or disappearing. Just like with the other effects, sliding can be applied to 
any element on your page whether it be an image, a video, or text.

Sliding methods are animations; they happen over a period of time. As a result, sliding methods have an optional parameter to determine how long the animation will take.

$('.menu-button').on('click', () => {
  $('.menu-content').slideDown('slow');
});

In the above code, we call the .slideDown() method on the elements of class menu-content whenever menu-button elements are clicked. The slow parameter determines the speed of the 
animation. That code will produce something that looks like this:


The menu-button element is clicked and the menu-content element slides down into place

There are two other sliding methods in jQuery Effects. Use the documentation to find their names and read about their usage. One is used to slide elements up, and the other is used to 
toggle sliding effects.

* Instructions
--------------
Checkpoint 1 Passed
1.
We’ve added a third image and three more buttons to our chart. We’re going to make each button apply a different slide effect to that image. Inside the first new event handler, target the 
third image by its class slide-image and call the .slideUp() method on it. Let’s make it slide up really quickly; use 100 as the parameter. Test that button!

Checkpoint 2 Passed
2.
For the event handler connected to the button of class down-button, call .slideDown() on the .slide-image element. Remember to target the image based on its class!

Let’s have the image slide down slowly. Use 'slow' as the parameter.

Checkpoint 3 Passed
3.
Finally, inside the final event handler’s callback function, call .slideToggle() on the image of class slide-image. For this method, don’t give it any argument. Remember, the argument is 
optional! If you don’t enter anything, it will default to 400. Test all three of your buttons.

main.js
-------
$(document).ready(() => {
  $('.hide-button').on('click', () => {
    $('.first-image').hide();
  });
  
  $('.show-button').on('click', () => {
    $('.first-image').show();
  });
  
  $('.toggle-button').on('click', () => {
    $('.first-image').toggle();
  });
  
  $('.fade-out-button').on('click', () => {
    $('.fade-image').fadeOut(500);
  });
  
  $('.fade-in-button').on('click', () => {
    $('.fade-image').fadeIn(4000);
  });
  
  $('.fade-toggle-button').on('click', () => {
    $('.fade-image').fadeToggle();
  });
  
  $('.up-button').on('click', () => {
    $('.slide-image').slideUp(100);
  });
  
  $('.down-button').on('click', () => {
    $('.slide-image').slideDown('slow');
  });
  
  $('.slide-toggle-button').on('click', () => {
    $('.slide-image').slideToggle(400);
  });
  
});

------------------------------------------------------------------------------------------------------------------------------------------------------------------











































































































































